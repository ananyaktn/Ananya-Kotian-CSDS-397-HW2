-- ensure unique employee id
SELECT employee_id, COUNT(*)
FROM employee_data
GROUP BY employee_id
HAVING COUNT(*) > 1

-- count nulls in each column
SELECT
    COUNT(CASE WHEN employee_id IS NULL THEN 1 END) AS employee_id,
    COUNT(CASE WHEN name IS NULL THEN 1 END) AS name,
    COUNT(CASE WHEN age IS NULL THEN 1 END) AS age,
	COUNT(CASE WHEN department IS NULL THEN 1 END) AS department,
	COUNT(CASE WHEN date_of_joining IS NULL THEN 1 END) AS date_of_joining,
	COUNT(CASE WHEN years_of_experience IS NULL THEN 1 END) AS years_of_experience,
	COUNT(CASE WHEN country IS NULL THEN 1 END) AS country,
	COUNT(CASE WHEN salary IS NULL THEN 1 END) AS salary,
	COUNT(CASE WHEN performance_rating IS NULL THEN 1 END) AS performance_rating
FROM employee_data_source

-- check for unrealistic date of joining
SELECT 
    COUNT(*) 
FROM 
    public.employee_data_source
WHERE 
    date_of_joining < '1900-01-01' OR 
    date_of_joining > CURRENT_DATE

-- check for unrealistic salaries
SELECT salary
FROM employee_data_source
WHERE salary > 1000000 OR
salary < 0

-- check distribution of salaries
SELECT 
    MIN(salary) AS min, 
    MAX(salary) AS max, 
    AVG(salary) AS avg, 
    STDDEV(salary) AS stddev 
FROM 
    public.employee_data_source

-- check distribution of ages
SELECT 
    MIN(age) AS min_age, 
    MAX(age) AS max_age, 
    AVG(age) AS avg_age, 
    STDDEV(age) AS stddev_age 
FROM 
    public.employee_data_source

-- check salary outliers
WITH stats AS (
    SELECT 
        percentile_cont(0.25) WITHIN GROUP (ORDER BY salary) AS q1,
        percentile_cont(0.75) WITHIN GROUP (ORDER BY salary) AS q3
    FROM 
        public.employee_data_source
)
SELECT * 
FROM employee_data 
WHERE salary < (SELECT q1 - 1.5 * (q3 - q1) FROM stats) 
   OR salary > (SELECT q3 + 1.5 * (q3 - q1) FROM stats);


-- view all country names
SELECT DISTINCT country from employee_data ORDER BY country

-- view all performance categories
SELECT DISTINCT performance_rating, COUNT(*)
FROM employee_data_source
GROUP BY performance_rating

-- check for unrealistic years of experience
SELECT employee_id 
FROM employee_data 
WHERE years_of_experience < 0 OR years_of_experience > (age - 18)
